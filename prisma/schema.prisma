generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Pathway {
  id          String  @id @default(uuid())
  userId      String
  title       String
  description String? @db.Text
  imageUrl    String? @db.Text
  isPublished Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  courses Course[]
}

model Course {
  id          String  @id @default(uuid())
  userId      String
  title       String
  description String? @db.Text
  imageUrl    String? @db.Text
  isPublished Boolean @default(false)
  position    Int

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  pathway   Pathway? @relation(fields: [pathwayId], references: [id], onDelete: Cascade)
  pathwayId String?

  chapters    Chapter[]
  attachments Attachment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([pathwayId])
  @@index([categoryId])
}

model Category {
  id      String   @id @default(uuid())
  name    String   @unique
  courses Course[]
}

model Attachment {
  id   String @id @default(uuid())
  name String
  url  String @db.Text

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@index([courseId])
}

model Chapter {
  id          String  @id @default(uuid())
  title       String
  description String? @db.Text
  videoUrl    String? @db.Text
  position    Int
  isPublished Boolean @default(false)
  isFree      Boolean @default(false)

  muxData MuxData?

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userProgress UserProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@index([courseId])
}

model MuxData {
  id         String  @id @default(uuid())
  assetId    String
  playbackId String?

  chapterId String  @unique
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model UserProgress {
  id     String @id @default(uuid())
  userId String

  chapterId String
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@unique([userId, chapterId])
  @@index([chapterId])
}
